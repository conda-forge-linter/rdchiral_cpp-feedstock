diff --git a/CMakeLists.txt b/CMakeLists.txt
index dea25b1..2938f1c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -10,6 +10,13 @@ if(NOT CMAKE_BUILD_TYPE)
       FORCE)
 endif(NOT CMAKE_BUILD_TYPE)
 
+# for libraries and headers in the target directories
+set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
+set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
+
+# god-awful hack because it seems to not run correct tests to determine this:
+set(__CHAR_UNSIGNED___EXITCODE 1)
+
 set(CMAKE_CXX_STANDARD 20)
 set(CMAKE_CXX_STANDARD_REQUIRED ON)
 
@@ -39,7 +46,7 @@ set(Boost_USE_STATIC_LIBS OFF)
 set(Boost_USE_MULTITHREADED OFF)
 set(Boost_USE_STATIC_RUNTIME OFF)
 find_package( RDKit COMPONENTS
-    ChemReactions Depictor
+    ChemReactions Depictor ChemTransforms
     MolDraw2D DistGeometry DistGeomHelpers
     MolAlign Optimizer ForceField ForceFieldHelpers
     Alignment Fingerprints MolTransforms EigenSolvers
@@ -56,12 +63,19 @@ find_package(PythonLibs REQUIRED)
 message("python bin: ${PYTHON_EXECUTABLE}")
 message("python version: ${PYTHONLIBS_VERSION_STRING}")
 string(REGEX MATCH "^[0-9]+\.[0-9]+" PY_VERSION_MAJOR_MINOR "${PYTHONLIBS_VERSION_STRING}")
+string(REGEX MATCH "^[0-9]+" PY_VERSION_MAJOR "${PYTHONLIBS_VERSION_STRING}")
 string(REPLACE "." "" PY_VERSION_MAJOR_MINOR "${PY_VERSION_MAJOR_MINOR}")
 message("python version used by Boost: ${PY_VERSION_MAJOR_MINOR}")
-find_package(Boost COMPONENTS system python${PY_VERSION_MAJOR_MINOR} REQUIRED)
+find_package(Boost COMPONENTS system python${PY_VERSION_MAJOR_MINOR} python${PY_VERSION_MAJOR} REQUIRED)
 include_directories(${PYTHON_INCLUDE_DIRS})
 include_directories(${Boost_INCLUDE_DIRS})
-set( LIBS ${LIBS} Boost::python${PY_VERSION_MAJOR_MINOR} ${PYTHON_LIBRARIES})
+
+if(APPLE)
+    set( LIBS ${LIBS} Boost::python${PY_VERSION_MAJOR_MINOR} )
+else()
+    set( LIBS ${LIBS} Boost::python${PY_VERSION_MAJOR_MINOR} ${PYTHON_LIBRARIES})
+endif(APPLE)
+
 execute_process(COMMAND ${PYTHON_EXECUTABLE} -c "from distutils.sysconfig import get_python_lib; print(get_python_lib(1,0,prefix='${CMAKE_INSTALL_PREFIX}'))" OUTPUT_VARIABLE PYTHON_SITE_PACKAGES_DIR OUTPUT_STRIP_TRAILING_WHITESPACE)
 message("python site-package dir: ${PYTHON_SITE_PACKAGES_DIR}")
 endif(USE_PYTHON)
@@ -78,8 +92,8 @@ include_directories(${CMAKE_SOURCE_DIR})
 
 add_subdirectory(rdchiral)
 
-include(CTest)
-add_subdirectory(test)
+# include(CTest)
+# add_subdirectory(test)
 
 # add the uninstall support
 configure_file(
diff --git a/cmake/FindRDKit.cmake b/cmake/FindRDKit.cmake
index 898b319..2caa907 100644
--- a/cmake/FindRDKit.cmake
+++ b/cmake/FindRDKit.cmake
@@ -32,7 +32,7 @@ set(RDKIT_FOUND "RDKit_FOUND")
 foreach(component ${RDKit_FIND_COMPONENTS})
   message( "Looking for RDKit component ${component}" )
   find_file( RDKit_LIBRARY_${component}
-    libRDKit${component}.so
+    libRDKit${component}${CMAKE_SHARED_LIBRARY_SUFFIX}
     PATH ${RDKIT_DIR}/lib NO_DEFAULT_PATH)
   message("RDKit_LIBRARY_${component} : ${RDKit_LIBRARY_${component}}")
   if(${RDKit_LIBRARY_${component}} MATCHES "-NOTFOUND$")
diff --git a/rdchiral/CMakeLists.txt b/rdchiral/CMakeLists.txt
index 56a3f19..288411f 100644
--- a/rdchiral/CMakeLists.txt
+++ b/rdchiral/CMakeLists.txt
@@ -9,7 +9,7 @@ add_library(rdchiral SHARED
     template_extractor.cpp
 )
 set_target_properties(rdchiral PROPERTIES PUBLIC_HEADER "bonds.hpp;clean.hpp;parity.hpp;rdkit_helper.hpp;util.hpp;chiral.hpp;rdchiral.hpp;smarts_util.hpp;template_extractor.hpp")
-target_link_libraries( rdchiral ${LIBS} )
+target_link_libraries( rdchiral ${LIBS} ${Boost_LIBRARIES} )
 install(TARGETS rdchiral
     LIBRARY DESTINATION lib
     PUBLIC_HEADER DESTINATION include/rdchiral
@@ -17,7 +17,24 @@ install(TARGETS rdchiral
 
 if(USE_PYTHON)
 add_library(py_rdchiral SHARED python_wrapper.cpp)
-target_link_libraries(py_rdchiral rdchiral ${LIBS} )
+
+if(APPLE)
+    set_target_properties(py_rdchiral PROPERTIES SUFFIX ".so")  # must be .so (not .dylib)
+
+    # On OSX + Clang this link flag is apparently necessary in order to avoid
+    # undefined references to symbols defined in the Python library. See also:
+    # https://github.com/potassco/clingo/issues/79
+    # https://stackoverflow.com/questions/25421479/clang-and-undefined-symbols-when-building-a-library
+    # https://cmake.org/pipermail/cmake/2017-March/065115.html
+    set_target_properties(py_rdchiral PROPERTIES LINK_FLAGS "-undefined dynamic_lookup")
+
+else()
+    # Interpreter is statically linked on macOS so do not use `libpython`.
+    SET(py_rdchiral_LIBRARIES ${PYTHON_LIBRARIES})
+endif(APPLE)
+
+target_link_libraries(py_rdchiral rdchiral ${LIBS} ${Boost_LIBRARIES} ${py_rdchiral_LIBRARIES} )
+
 set_target_properties(py_rdchiral PROPERTIES PREFIX "")
 set_target_properties(py_rdchiral PROPERTIES OUTPUT_NAME "rdchiral")
 install(TARGETS py_rdchiral
